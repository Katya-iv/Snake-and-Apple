import pygame
from pygame.locals import *
import random
import time


class Apple:
    def __init__(self, parent_screen):
        self.parent_screen = parent_screen
        self.image = pygame.image.load("pygame/apple.jpg").convert()
        self.r = 120
        self.k = 120

    def move(self):
        self.r = random.randint(1, 35) * 40
        self.k = random.randint(1, 28) * 40

    def draw(self):
        self.parent_screen.blit(self.image, (self.r, self.k))
        pygame.display.flip()


class Snake:
    def __init__(self, parent_screen):
        self.parent_screen = parent_screen
        self.image = pygame.image.load("pygame/block.jpg").convert()
        self.direction = 'down'
        self.length = 1
        self.r = [40]
        self.k = [40]

    def move_up(self):
        self.direction = 'up'

    def move_down(self):
        self.direction = 'down'

    def move_left(self):
        self.direction = 'left'

    def move_right(self):
        self.direction = 'right'

    def walk(self):
        for i in range(self.length - 1, 0, -1):
            self.r[i] = self.r[i - 1]
            self.k[i] = self.k[i - 1]
        if self.direction == 'up':
            self.k[0] -= 40
        if self.direction == 'down':
            self.k[0] += 40
        if self.direction == 'left':
            self.r[0] -= 40
        if self.direction == 'right':
            self.r[0] += 40
        self.draw()

    def draw(self):
        for i in range(self.length):
            self.parent_screen.blit(self.image, (self.r[i], self.k[i]))
        pygame.display.flip()

    def increase_length(self):
        self.length += 1
        self.r.append(-1)
        self.k.append(-1)


def play_background_music():
    pygame.mixer.music.load('pygame/bg_music_1.mp3')
    pygame.mixer.music.play(-1, 0)


def play_sound(sound_name):
    global sound
    if sound_name == "crash":
        sound = pygame.mixer.Sound("pygame/crash.mp3")
    elif sound_name == 'ding':
        sound = pygame.mixer.Sound("pygame/ding.mp3")
    pygame.mixer.Sound.play(sound)


class Game:
    def __init__(self):
        pygame.init()
        pygame.display.set_caption("Codebase Snake And Apple Game")

        pygame.mixer.init()
        play_background_music()

        self.surface = pygame.display.set_mode((1900, 900))
        self.snake = Snake(self.surface)
        self.snake.draw()
        self.apple = Apple(self.surface)
        self.apple.draw()

    def reset(self):
        self.snake = Snake(self.surface)
        self.apple = Apple(self.surface)

    @staticmethod
    def is_collision(r1, k1, r2, k2):
        if r2 <= r1 < r2 + 40:
            if k2 <= k1 < k2 + 40:
                return True
        return False

    def render_background(self):
        bg = pygame.image.load("pygame/background.jpg")
        self.surface.blit(bg, (0, 0))

    def play(self):
        self.render_background()
        self.snake.walk()
        self.apple.draw()
        self.display_score()
        pygame.display.flip()

        if self.is_collision(self.snake.r[0], self.snake.k[0], self.apple.r, self.apple.k):
            play_sound("ding")
            self.snake.increase_length()
            self.apple.move()

        for i in range(3, self.snake.length):
            if self.is_collision(self.snake.r[0], self.snake.k[0], self.snake.r[i], self.snake.k[i]):
                play_sound('crash')
                raise "Collision Occurred"

    def display_score(self):
        font = pygame.font.SysFont('arial', 45)
        score = font.render(f"Score: {self.snake.length}", True, (200, 200, 200))
        self.surface.blit(score, (850, 10))

    def game_over(self):
        self.render_background()
        font = pygame.font.SysFont('arial', 30)
        line1 = font.render(f"Game is over! Your score is {self.snake.length}", True, (270, 270, 270))
        self.surface.blit(line1, (200, 300))
        line2 = font.render("To play again press Enter. To exit press Esc!", True, (270, 270, 270))
        self.surface.blit(line2, (200, 350))
        pygame.mixer.music.pause()
        pygame.display.flip()

    def run(self):
        running = True
        pause = False

        while running:
            for event in pygame.event.get():
                if event.type == KEYDOWN:
                    if event.key == K_ESCAPE:
                        running = False

                    if event.key == K_RETURN:
                        pygame.mixer.music.unpause()
                        pause = False

                    if not pause:
                        if event.key == K_LEFT:
                            self.snake.move_left()

                        if event.key == K_RIGHT:
                            self.snake.move_right()

                        if event.key == K_UP:
                            self.snake.move_up()

                        if event.key == K_DOWN:
                            self.snake.move_down()

                elif event.type == QUIT:
                    running = False
            try:

                if not pause:
                    self.play()

            except Exception as f:
                self.game_over()
                pause = True
                self.reset()

            time.sleep(.30)


if __name__ == '__main__':
    game = Game()
    game.run()
